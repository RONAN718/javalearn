jvm常用指令
java -XX:+PrintGCDetails GCLogAnalysis //打印垃圾回收的事件
-XX:+PrintGCDateStamps                 //打印垃圾回收事件的时间
-Xloggc:gclog.txt                     //将垃圾回收日志打印至一个文件内

我的电脑内存是16G，使用四分之一的物理内存作为虚拟机的堆内存
如果电脑的总内存小于1G就会使用二分之一的物理内存作为虚拟机的堆内存

可以使用
-Xmx1g    -Xms1g    显示地配置堆内存（建议把两者的值设置为一样 防止抖动）

jvm日志解读
jdk8使用并行gc需要一个STOP THE WORLD（STW）
2021-06-30T11:41:33.902+0200: 0.223: [GC (Allocation Failure) [PSYoungGen: 262144K->43518K(305664K)] 262144K->83738K(1005056K), 0.0178720 secs] [Times: user=0.09 sys=0.06, real=0.02 secs] 
时间戳                                堆内存的变化情况            young区空间压缩情况      young区最大的容量                          STW的时间              CPU使用情况
                                      GC发生原因:分配内存失败   

2021-06-30T11:41:33.902+0200: 0.223  时间戳  
[GC (Allocation Failure) [PSYoungGen: 262144K->43518K(305664K)] 262144K->83738K(1005056K), 0.0178720 secs] 堆内存的变化情况  
    |-GC (Allocation Failure)  //GC发生原因:分配内存失败   
    |-[PSYoungGen: 262144K->43518K(305664K)] //young区空间压缩情况
    |-262144K->83738K(1005056K) //堆内存的空间压缩情况
    |- 0.0178720 secs //STW的时间，因为jdk8默认是并行gc需要一个STOP-THE-WORLD
[Times: user=0.09 sys=0.06, real=0.02 secs] // CPU使用情况


2021-06-30T11:41:34.529+0200: 0.850: [Full GC (Ergonomics) [PSYoungGen: 41389K->0K(232960K)] [ParOldGen: 623009K->334202K(699392K)] 664398K->334202K(932352K), [Metaspace: 2714K->2714K(1056768K)], 0.0698425 secs] [Times: user=0.61 sys=0.00, real=0.07 secs] 
2021-06-30T11:41:34.529+0200: 0.850: 
[Full GC (Ergonomics) [PSYoungGen: 41389K->0K(232960K)] [ParOldGen: 623009K->334202K(699392K)] 664398K->334202K(932352K), [Metaspace: 2714K->2714K(1056768K)], 0.0698425 secs] 
    |-Full GC (Ergonomics)  //FULL GC发生原因:功效学 需要自己来分析一波了这个假大空的词汇   
    |-[PSYoungGen: 41389K->0K(232960K)] //young区空间压缩情况
    |-[ParOldGen: 623009K->334202K(699392K)] //老年区的空间压缩情况
    |-664398K->334202K(932352K) //堆内存的空间压缩情况
    |-[Metaspace: 2714K->2714K(1056768K)]//元空间压缩情况
    |- 0.0698425 secs //STW的时间，因为jdk8默认是并行gc需要一个STOP-THE-WORLD
[Times: user=0.61 sys=0.00, real=0.07 secs] 

Young GC 年轻代的垃圾回收 内存小存活对象比较少 影响比较小所以也叫做 Minor GC小型GC
Full GC 年轻老年都垃圾回收 内存比较大存活对象比较多  影响比较大所以叫做 Major GC大型GC


java -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xmx1g -Xms1g -XX:+UseSerialGC GCLogAnalysis
// 串行化垃圾回收

2021-06-30T19:20:31.159+0200: [GC (Allocation Failure) 2021-06-30T19:20:31.159+0200: [DefNew: 314559K->34943K(314560K), 0.0571697 secs] 360358K->156489K(1013632K), 0.0578934 secs] [Times: user=0.03 sys=0.03, real=0.06 secs]
DefNew: 314559K->34943K(314560K), 0.0571697 secs]//young区空间压缩情况

2021-06-30T19:20:31.829+0200: [GC (Allocation Failure) 2021-06-30T19:20:31.829+0200: [DefNew: 314559K->314559K(314560K), 0.0002916 secs]
2021-06-30T19:20:31.830+0200: [Tenured: 602274K->369710K(699072K), 0.0611486 secs] 916834K->369710K(1013632K), [Metaspace: 2713K->2713K(1056768K)], 0.0634332 secs] [Times: user=0.06 sys=0.00, real=0.06 secs]
串行化垃圾回收 老年代垃圾回收的时间和年轻代垃圾回收的时间类似 因为串行化垃圾回收是单线程的执行效率比较低

jdk8默认自适应参数是打开的内部会使用算法动态地调整各种容量的大小
默认晋升老年代阈值是15 经过15次YOUNG GC就会晋升到老年代

不配置Xms就会有一个堆内存缓慢上升至Xms的过程 因为堆内存的变小导致gc更频繁
堆内存配置越大单位时间内gc频率会降低
最低大小必须要容纳程序的所有对象存活

java -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:serialGC -Xmx1g -Xms1g -XX:+UseConcMarkSweepGC GCLogAnalysis

Cms一开始只标记了根对象和根对象可达对象和跨区的直接引用对象
CMS初始化标记需要暂停
并发标记
并发预清理
可取消的并发预清理
CMS针对老年代所以在其过程中会发生一次或多次的youngGC 
CMS最终标记需要暂停
并发清理
并发重置

一个对象占用多少内存
对象头+对象体=对象
对象头
    |-标记字 1个机器字
    |-Class指针 1个机器字
    |-数组长度（int） 数组独有
对象体
    |-内部空白
    |-实例数据
外部对齐

64位JVM中对象头占用12byte 8+4 所以一个空类实例也要16个字节因为以8字节对齐
使用Integer包装类比原生类型多了三倍的内存消耗 原来就4个字节现在要16个字节  

多维数组的坑 数组对象嵌套对象数组会导致额外的内存开销
64位机器上 数组对象的对象头占用24个字节(实际是8+8+4=20 但是20个字节不是8的倍数补齐为24) 启用压缩后占用16个字节
int[128][2] 
3600=128*(4*2+12+4)+128*(4)+16
    |-128*(4*2+16)//128个int[2]  int[2]的大小是4*2+12+4 16字节是对象头
    |-128*(4)+16//1个int[128]  int[128]的大小是128*(4)+16 16字节是对象头

int[256]
1040=256*4+16
    |-256*(4)+16//1个int[256]  int[256]的大小是256*(4)+16 16字节是对象头

String类的对象有24个字节的额外开销
对于10字符以内的非空String,增加开销比有效载荷多了一倍到四倍的内存
每个字符只占2个字节+4个字节的length

分配速率 年轻代上新对象的分配速率
从上一次垃圾回收之后与下一次GC开始之前的年轻代使用量除以两次gc的时间间隔
分配速率比较低 约等于回收速率====>健康
分配速率 持续大于 回收速率 ===>内存泄漏
分配速率比较高 约等于回收速率====>亚健康
晋升速率/提升速率 从年轻代晋升到老年代的对象的速率